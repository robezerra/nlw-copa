{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useTheme } from \"native-base\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function ButtonIcon(_ref) {\n  var Icon = _ref.icon,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors,\n    sizes = _useTheme.sizes;\n  return _jsx(TouchableOpacity, _objectSpread(_objectSpread({}, rest), {}, {\n    children: _jsx(Icon, {\n      color: colors.gray[300],\n      size: sizes[6]\n    })\n  }));\n}","map":{"version":3,"names":["useTheme","ButtonIcon","Icon","icon","rest","colors","sizes","gray"],"sources":["C:/Users/rbfer/documents/projetos/estudos/nlw-copa/mobile/src/components/ButtonIcon.tsx"],"sourcesContent":["import { TouchableOpacity, TouchableOpacityProps } from \"react-native\";\nimport { IconProps } from \"phosphor-react-native\";\nimport { useTheme } from \"native-base\";\n\ninterface Props extends TouchableOpacityProps {\n  icon: React.FC<IconProps>;\n}\n\nexport function ButtonIcon({ icon: Icon, ...rest }: Props) {\n  const { colors, sizes } = useTheme();\n\n  return (\n    <TouchableOpacity {...rest}>\n      <Icon color={colors.gray[300]} size={sizes[6]} />\n    </TouchableOpacity>\n  );\n}"],"mappings":";;;;;;AAEA,SAASA,QAAQ,QAAQ,aAAa;AAAC;AAMvC,OAAO,SAASC,UAAU,OAAiC;EAAA,IAAxBC,IAAI,QAAVC,IAAI;IAAWC,IAAI;EAC9C,gBAA0BJ,QAAQ,EAAE;IAA5BK,MAAM,aAANA,MAAM;IAAEC,KAAK,aAALA,KAAK;EAErB,OACE,KAAC,gBAAgB,kCAAKF,IAAI;IAAA,UACxB,KAAC,IAAI;MAAC,KAAK,EAAEC,MAAM,CAACE,IAAI,CAAC,GAAG,CAAE;MAAC,IAAI,EAAED,KAAK,CAAC,CAAC;IAAE;EAAG,GAChC;AAEvB"},"metadata":{},"sourceType":"module"}