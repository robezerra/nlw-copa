{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"language\", \"loginHint\", \"selectAccount\", \"extraParams\", \"clientSecret\"],\n  _excluded2 = [\"extraParams\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport * as Application from 'expo-application';\nimport { useEffect, useMemo, useState } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useAuthRequestResult, useLoadedAuthRequest } from \"../AuthRequestHooks\";\nimport { AuthRequest, generateHexStringAsync, makeRedirectUri, Prompt, ResponseType } from \"../AuthSession\";\nimport { AccessTokenRequest } from \"../TokenRequest\";\nimport { applyRequiredScopes, invariantClientId, useProxyEnabled } from \"./ProviderUtils\";\nvar settings = {\n  windowFeatures: {\n    width: 515,\n    height: 680\n  },\n  minimumScopes: ['openid', 'https://www.googleapis.com/auth/userinfo.profile', 'https://www.googleapis.com/auth/userinfo.email']\n};\nexport var discovery = {\n  authorizationEndpoint: 'https://accounts.google.com/o/oauth2/v2/auth',\n  tokenEndpoint: 'https://oauth2.googleapis.com/token',\n  revocationEndpoint: 'https://oauth2.googleapis.com/revoke',\n  userInfoEndpoint: 'https://openidconnect.googleapis.com/v1/userinfo'\n};\nvar GoogleAuthRequest = function (_AuthRequest) {\n  _inherits(GoogleAuthRequest, _AuthRequest);\n  var _super = _createSuper(GoogleAuthRequest);\n  function GoogleAuthRequest(_ref) {\n    var language = _ref.language,\n      loginHint = _ref.loginHint,\n      selectAccount = _ref.selectAccount,\n      _ref$extraParams = _ref.extraParams,\n      extraParams = _ref$extraParams === void 0 ? {} : _ref$extraParams,\n      clientSecret = _ref.clientSecret,\n      config = _objectWithoutProperties(_ref, _excluded);\n    _classCallCheck(this, GoogleAuthRequest);\n    var inputParams = _objectSpread({}, extraParams);\n    if (language) inputParams.hl = language;\n    if (loginHint) inputParams.login_hint = loginHint;\n    if (selectAccount) inputParams.prompt = Prompt.SelectAccount;\n    var scopes = applyRequiredScopes(config.scopes, settings.minimumScopes);\n    var isImplicit = config.responseType === ResponseType.Token || config.responseType === ResponseType.IdToken;\n    if (isImplicit) {\n      config.usePKCE = false;\n    }\n    var inputClientSecret;\n    if (config.responseType && config.responseType !== ResponseType.Code) {\n      inputClientSecret = clientSecret;\n    }\n    return _super.call(this, _objectSpread(_objectSpread({}, config), {}, {\n      clientSecret: inputClientSecret,\n      scopes: scopes,\n      extraParams: inputParams\n    }));\n  }\n  _createClass(GoogleAuthRequest, [{\n    key: \"getAuthRequestConfigAsync\",\n    value: function () {\n      var _getAuthRequestConfigAsync = _asyncToGenerator(function* () {\n        var _yield$_get$call = yield _get(_getPrototypeOf(GoogleAuthRequest.prototype), \"getAuthRequestConfigAsync\", this).call(this),\n          _yield$_get$call$extr = _yield$_get$call.extraParams,\n          extraParams = _yield$_get$call$extr === void 0 ? {} : _yield$_get$call$extr,\n          config = _objectWithoutProperties(_yield$_get$call, _excluded2);\n        if (config.responseType === ResponseType.IdToken && !extraParams.nonce && !this.nonce) {\n          if (!this.nonce) {\n            this.nonce = yield generateHexStringAsync(16);\n          }\n          extraParams.nonce = this.nonce;\n        }\n        return _objectSpread(_objectSpread({}, config), {}, {\n          extraParams: extraParams\n        });\n      });\n      function getAuthRequestConfigAsync() {\n        return _getAuthRequestConfigAsync.apply(this, arguments);\n      }\n      return getAuthRequestConfigAsync;\n    }()\n  }]);\n  return GoogleAuthRequest;\n}(AuthRequest);\nexport function useIdTokenAuthRequest(config) {\n  var redirectUriOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var useProxy = useProxyEnabled(redirectUriOptions);\n  var isWebAuth = useProxy || Platform.OS === 'web';\n  return useAuthRequest(_objectSpread(_objectSpread({}, config), {}, {\n    responseType:\n    !config.clientSecret &&\n    isWebAuth ? ResponseType.IdToken : undefined\n  }), _objectSpread(_objectSpread({}, redirectUriOptions), {}, {\n    useProxy: useProxy\n  }));\n}\nexport function useAuthRequest() {\n  var _config$scopes;\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var redirectUriOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var useProxy = useProxyEnabled(redirectUriOptions);\n  var clientId = useMemo(function () {\n    var _config$propertyName;\n    var propertyName = useProxy ? 'expoClientId' : Platform.select({\n      ios: 'iosClientId',\n      android: 'androidClientId',\n      default: 'webClientId'\n    });\n    var clientId = (_config$propertyName = config[propertyName]) != null ? _config$propertyName : config.clientId;\n    invariantClientId(propertyName, clientId, 'Google');\n    return clientId;\n  }, [useProxy, config.expoClientId, config.iosClientId, config.androidClientId, config.webClientId, config.clientId]);\n  var responseType = useMemo(function () {\n    if (typeof config.responseType !== 'undefined') {\n      return config.responseType;\n    }\n    var isInstalledApp = Platform.OS !== 'web' && !useProxy;\n    if (config.clientSecret || isInstalledApp) {\n      return ResponseType.Code;\n    }\n    return ResponseType.Token;\n  }, [config.responseType, config.clientSecret, useProxy]);\n  var redirectUri = useMemo(function () {\n    if (typeof config.redirectUri !== 'undefined') {\n      return config.redirectUri;\n    }\n    return makeRedirectUri(_objectSpread({\n      native: Application.applicationId + \":/oauthredirect\",\n      useProxy: useProxy\n    }, redirectUriOptions));\n  }, [useProxy, config.redirectUri, redirectUriOptions]);\n  var extraParams = useMemo(function () {\n    var output = config.extraParams ? _objectSpread({}, config.extraParams) : {};\n    if (config.language) {\n      output.hl = output.language;\n    }\n    if (config.loginHint) {\n      output.login_hint = output.loginHint;\n    }\n    if (config.selectAccount) {\n      output.prompt = Prompt.SelectAccount;\n    }\n    return output;\n  }, [config.extraParams, config.language, config.loginHint, config.selectAccount]);\n  var request = useLoadedAuthRequest(_objectSpread(_objectSpread({}, config), {}, {\n    responseType: responseType,\n    extraParams: extraParams,\n    clientId: clientId,\n    redirectUri: redirectUri\n  }), discovery, GoogleAuthRequest);\n  var _useAuthRequestResult = useAuthRequestResult(request, discovery, {\n      useProxy: useProxy,\n      windowFeatures: settings.windowFeatures\n    }),\n    _useAuthRequestResult2 = _slicedToArray(_useAuthRequestResult, 2),\n    result = _useAuthRequestResult2[0],\n    promptAsync = _useAuthRequestResult2[1];\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    fullResult = _useState2[0],\n    setFullResult = _useState2[1];\n  var shouldAutoExchangeCode = useMemo(function () {\n    if (typeof config.shouldAutoExchangeCode !== 'undefined') {\n      return config.shouldAutoExchangeCode;\n    }\n    return (result == null ? void 0 : result.type) === 'success' && result.params.code && !result.authentication;\n  }, [config.shouldAutoExchangeCode, result == null ? void 0 : result.type]);\n  useEffect(function () {\n    var isMounted = true;\n    if (shouldAutoExchangeCode && (result == null ? void 0 : result.type) === 'success') {\n      var exchangeRequest = new AccessTokenRequest({\n        clientId: clientId,\n        clientSecret: config.clientSecret,\n        redirectUri: redirectUri,\n        scopes: config.scopes,\n        code: result.params.code,\n        extraParams: {\n          code_verifier: (request == null ? void 0 : request.codeVerifier) || ''\n        }\n      });\n      exchangeRequest.performAsync(discovery).then(function (authentication) {\n        if (isMounted) {\n          setFullResult(_objectSpread(_objectSpread({}, result), {}, {\n            params: _objectSpread({\n              id_token: (authentication == null ? void 0 : authentication.idToken) || '',\n              access_token: authentication.accessToken\n            }, result.params),\n            authentication: authentication\n          }));\n        }\n      });\n    } else {\n      setFullResult(result);\n    }\n    return function () {\n      isMounted = false;\n    };\n  }, [clientId, redirectUri, shouldAutoExchangeCode, config.clientSecret, (_config$scopes = config.scopes) == null ? void 0 : _config$scopes.join(','), request == null ? void 0 : request.codeVerifier, result]);\n  return [request, fullResult, promptAsync];\n}","map":{"version":3,"mappings":"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","names":["Application","useEffect","useMemo","useState","useAuthRequestResult","useLoadedAuthRequest","AuthRequest","generateHexStringAsync","makeRedirectUri","Prompt","ResponseType","AccessTokenRequest","applyRequiredScopes","invariantClientId","useProxyEnabled","settings","windowFeatures","width","height","minimumScopes","discovery","authorizationEndpoint","tokenEndpoint","revocationEndpoint","userInfoEndpoint","GoogleAuthRequest","language","loginHint","selectAccount","extraParams","clientSecret","config","inputParams","hl","login_hint","prompt","SelectAccount","scopes","isImplicit","responseType","Token","IdToken","usePKCE","inputClientSecret","Code","nonce","useIdTokenAuthRequest","redirectUriOptions","useProxy","isWebAuth","Platform","OS","useAuthRequest","undefined","clientId","propertyName","select","ios","android","default","expoClientId","iosClientId","androidClientId","webClientId","isInstalledApp","redirectUri","native","applicationId","output","request","result","promptAsync","fullResult","setFullResult","shouldAutoExchangeCode","type","params","code","authentication","isMounted","exchangeRequest","code_verifier","codeVerifier","performAsync","then","id_token","idToken","access_token","accessToken","join"],"sourceRoot":"","sources":["../../src/providers/Google.ts"],"sourcesContent":["import * as Application from 'expo-application';\nimport { useEffect, useMemo, useState } from 'react';\nimport { Platform } from 'react-native';\n\nimport { useAuthRequestResult, useLoadedAuthRequest } from '../AuthRequestHooks';\nimport {\n  AuthRequest,\n  AuthRequestConfig,\n  AuthRequestPromptOptions,\n  AuthSessionRedirectUriOptions,\n  AuthSessionResult,\n  DiscoveryDocument,\n  generateHexStringAsync,\n  makeRedirectUri,\n  Prompt,\n  ResponseType,\n} from '../AuthSession';\nimport { AccessTokenRequest } from '../TokenRequest';\nimport { ProviderAuthRequestConfig } from './Provider.types';\nimport { applyRequiredScopes, invariantClientId, useProxyEnabled } from './ProviderUtils';\n\nconst settings = {\n  windowFeatures: { width: 515, height: 680 },\n  minimumScopes: [\n    'openid',\n    'https://www.googleapis.com/auth/userinfo.profile',\n    'https://www.googleapis.com/auth/userinfo.email',\n  ],\n};\n\nexport const discovery: DiscoveryDocument = {\n  authorizationEndpoint: 'https://accounts.google.com/o/oauth2/v2/auth',\n  tokenEndpoint: 'https://oauth2.googleapis.com/token',\n  revocationEndpoint: 'https://oauth2.googleapis.com/revoke',\n  userInfoEndpoint: 'https://openidconnect.googleapis.com/v1/userinfo',\n};\n\n// @needsAudit\nexport interface GoogleAuthRequestConfig extends ProviderAuthRequestConfig {\n  /**\n   * If the user's email address is known ahead of time, it can be supplied to be the default option.\n   * If the user has approved access for this app in the past then auth may return without any further interaction.\n   */\n  loginHint?: string;\n  /**\n   * When `true`, the service will allow the user to switch between accounts (if possible).\n   * @default false.\n   */\n  selectAccount?: boolean;\n  /**\n   * Proxy client ID for use in the Expo client on iOS and Android.\n   *\n   * This Google Client ID must be setup as follows:\n   *\n   * - **Application Type**: Web Application\n   * - **URIs**: https://auth.expo.io\n   * - **Authorized redirect URIs**: https://auth.expo.io/@your-username/your-project-slug\n   */\n  expoClientId?: string;\n  /**\n   * Expo web client ID for use in the browser.\n   *\n   * This Google Client ID must be setup as follows:\n   *\n   * - **Application Type**: Web Application\n   * - Give it a name (e.g. \"Web App\").\n   * - **URIs** (Authorized JavaScript origins): https://localhost:19006 & https://yourwebsite.com\n   * - **Authorized redirect URIs**: https://localhost:19006 & https://yourwebsite.com\n   * - To test this be sure to start your app with `expo start:web --https`.\n   */\n  webClientId?: string;\n  /**\n   * iOS native client ID for use in standalone, bare workflow, and custom clients.\n   *\n   * This Google Client ID must be setup as follows:\n   *\n   * - **Application Type**: iOS Application\n   * - Give it a name (e.g. \"iOS App\").\n   * - **Bundle ID**: Must match the value of `ios.bundleIdentifier` in your `app.json`.\n   * - Your app needs to conform to the URI scheme matching your bundle identifier.\n   *   - _Standalone_: Automatically added, do nothing.\n   *   - _Bare workflow_: Run `npx uri-scheme add <your bundle id> --ios`\n   * - To test this you can:\n   *   1. Prebuild to generate the native files: `expo prebuild` and run `yarn ios`\n   *   2. Create a custom client: `expo client:ios`\n   *   3. Build a production IPA: `expo build:ios`\n   * - Whenever you change the values in `app.json` you'll need to rebuild the native app.\n   */\n  iosClientId?: string;\n  /**\n   * Android native client ID for use in standalone, and bare workflow.\n   *\n   * This Google Client ID must be setup as follows:\n   *\n   * - **Application Type**: Android Application\n   * - Give it a name (e.g. \"Android App\").\n   * - **Package name**: Must match the value of `android.package` in your `app.json`.\n   * - Your app needs to conform to the URI scheme matching your `android.package` (ex. `com.myname.mycoolapp:/`).\n   *   - _Standalone_: Automatically added, do nothing.\n   *   - _Bare workflow_: Run `npx uri-scheme add <your android.package> --android`\n   * - **Signing-certificate fingerprint**:\n   *   - Run `expo credentials:manager -p android` then select \"Update upload Keystore\" -> \"Generate new keystore\" -> \"Go back to experience overview\"\n   *   - Copy your \"Google Certificate Fingerprint\", it will output a string that looks like `A1:B2:C3` but longer.\n   * - To test this you can:\n   *   1. Prebuild to generate the native files: `expo prebuild` and run `yarn ios`\n   *   2. Build a production IPA: `expo build:android`\n   */\n  androidClientId?: string;\n  /**\n   * Should the hook automatically exchange the response code for an authentication token.\n   *\n   * Defaults to `true` on installed apps (iOS, Android) when `ResponseType.Code` is used (default).\n   */\n  shouldAutoExchangeCode?: boolean;\n  /**\n   * Language code ISO 3166-1 alpha-2 region code, such as 'it' or 'pt-PT'.\n   */\n  language?: string;\n}\n\n// @needsAudit\n/**\n * Extends [`AuthRequest`](#authrequest) and accepts [`GoogleAuthRequestConfig`](#googleauthrequestconfig) in the constructor.\n */\nclass GoogleAuthRequest extends AuthRequest {\n  nonce?: string;\n\n  constructor({\n    language,\n    loginHint,\n    selectAccount,\n    extraParams = {},\n    clientSecret,\n    ...config\n  }: GoogleAuthRequestConfig) {\n    const inputParams = {\n      ...extraParams,\n    };\n    if (language) inputParams.hl = language;\n    if (loginHint) inputParams.login_hint = loginHint;\n    if (selectAccount) inputParams.prompt = Prompt.SelectAccount;\n\n    // Apply the default scopes\n    const scopes = applyRequiredScopes(config.scopes, settings.minimumScopes);\n    const isImplicit =\n      config.responseType === ResponseType.Token || config.responseType === ResponseType.IdToken;\n    if (isImplicit) {\n      // PKCE must be disabled in implicit mode.\n      config.usePKCE = false;\n    }\n    let inputClientSecret: string | undefined;\n    //  Google will throw if you attempt to use the client secret\n    if (config.responseType && config.responseType !== ResponseType.Code) {\n      // TODO: maybe warn that you shouldn't store the client secret on the client\n      inputClientSecret = clientSecret;\n    }\n    super({\n      ...config,\n      clientSecret: inputClientSecret,\n      scopes,\n      extraParams: inputParams,\n    });\n  }\n\n  /**\n   * Load and return a valid auth request based on the input config.\n   */\n  async getAuthRequestConfigAsync(): Promise<AuthRequestConfig> {\n    const { extraParams = {}, ...config } = await super.getAuthRequestConfigAsync();\n    if (config.responseType === ResponseType.IdToken && !extraParams.nonce && !this.nonce) {\n      if (!this.nonce) {\n        this.nonce = await generateHexStringAsync(16);\n      }\n      extraParams.nonce = this.nonce;\n    }\n    return {\n      ...config,\n      extraParams,\n    };\n  }\n}\n\n/**\n * Load an authorization request with an ID Token for authentication with Firebase.\n *\n * Returns a loaded request, a response, and a prompt method.\n * When the prompt method completes then the response will be fulfilled.\n *\n * The id token can be retrieved with `response.params.id_token`.\n *\n * - [Get Started](https://docs.expo.dev/guides/authentication/#google)\n *\n * @param config\n * @param redirectUriOptions\n */\nexport function useIdTokenAuthRequest(\n  config: Partial<GoogleAuthRequestConfig>,\n  redirectUriOptions: Partial<AuthSessionRedirectUriOptions> = {}\n): [\n  GoogleAuthRequest | null,\n  AuthSessionResult | null,\n  (options?: AuthRequestPromptOptions) => Promise<AuthSessionResult>\n] {\n  const useProxy = useProxyEnabled(redirectUriOptions);\n\n  const isWebAuth = useProxy || Platform.OS === 'web';\n\n  return useAuthRequest(\n    {\n      ...config,\n      responseType:\n        // If the client secret is provided then code can be used\n        !config.clientSecret &&\n        // When web auth is used, we can request the `id_token` directly without exchanging a code.\n        isWebAuth\n          ? ResponseType.IdToken\n          : undefined,\n    },\n    { ...redirectUriOptions, useProxy }\n  );\n}\n\n/**\n * Load an authorization request.\n * Returns a loaded request, a response, and a prompt method.\n * When the prompt method completes, then the response will be fulfilled.\n *\n * - [Get Started](https://docs.expo.dev/guides/authentication/#google)\n *\n * @param config\n * @param redirectUriOptions\n */\nexport function useAuthRequest(\n  config: Partial<GoogleAuthRequestConfig> = {},\n  redirectUriOptions: Partial<AuthSessionRedirectUriOptions> = {}\n): [\n  GoogleAuthRequest | null,\n  AuthSessionResult | null,\n  (options?: AuthRequestPromptOptions) => Promise<AuthSessionResult>\n] {\n  const useProxy = useProxyEnabled(redirectUriOptions);\n\n  const clientId = useMemo((): string => {\n    const propertyName = useProxy\n      ? 'expoClientId'\n      : Platform.select({\n          ios: 'iosClientId',\n          android: 'androidClientId',\n          default: 'webClientId',\n        });\n\n    const clientId = config[propertyName as any] ?? config.clientId;\n    invariantClientId(propertyName, clientId, 'Google');\n    return clientId;\n  }, [\n    useProxy,\n    config.expoClientId,\n    config.iosClientId,\n    config.androidClientId,\n    config.webClientId,\n    config.clientId,\n  ]);\n\n  const responseType = useMemo(() => {\n    // Allow overrides.\n    if (typeof config.responseType !== 'undefined') {\n      return config.responseType;\n    }\n    // You can only use `response_token=code` on installed apps (iOS, Android without proxy).\n    // Installed apps can auto exchange without a client secret and get the token and id-token (Firebase).\n    const isInstalledApp = Platform.OS !== 'web' && !useProxy;\n    // If the user provided the client secret (they shouldn't!) then use code exchange by default.\n    if (config.clientSecret || isInstalledApp) {\n      return ResponseType.Code;\n    }\n    // This seems the most pragmatic option since it can result in a full authentication on web and proxy platforms as expected.\n    return ResponseType.Token;\n  }, [config.responseType, config.clientSecret, useProxy]);\n\n  const redirectUri = useMemo((): string => {\n    if (typeof config.redirectUri !== 'undefined') {\n      return config.redirectUri;\n    }\n\n    return makeRedirectUri({\n      native: `${Application.applicationId}:/oauthredirect`,\n      useProxy,\n      ...redirectUriOptions,\n      // native: `com.googleusercontent.apps.${guid}:/oauthredirect`,\n    });\n  }, [useProxy, config.redirectUri, redirectUriOptions]);\n\n  const extraParams = useMemo((): GoogleAuthRequestConfig['extraParams'] => {\n    const output = config.extraParams ? { ...config.extraParams } : {};\n\n    if (config.language) {\n      output.hl = output.language;\n    }\n    if (config.loginHint) {\n      output.login_hint = output.loginHint;\n    }\n    if (config.selectAccount) {\n      output.prompt = Prompt.SelectAccount;\n    }\n    return output;\n  }, [config.extraParams, config.language, config.loginHint, config.selectAccount]);\n\n  const request = useLoadedAuthRequest(\n    {\n      ...config,\n      responseType,\n      extraParams,\n      clientId,\n      redirectUri,\n    },\n    discovery,\n    GoogleAuthRequest\n  );\n\n  const [result, promptAsync] = useAuthRequestResult(request, discovery, {\n    useProxy,\n    windowFeatures: settings.windowFeatures,\n  });\n\n  const [fullResult, setFullResult] = useState<AuthSessionResult | null>(null);\n\n  const shouldAutoExchangeCode = useMemo(() => {\n    // allow overrides\n    if (typeof config.shouldAutoExchangeCode !== 'undefined') {\n      return config.shouldAutoExchangeCode;\n    }\n\n    // has a code to exchange and doesn't have an authentication yet.\n    return result?.type === 'success' && result.params.code && !result.authentication;\n  }, [config.shouldAutoExchangeCode, result?.type]);\n\n  useEffect(() => {\n    let isMounted = true;\n    if (shouldAutoExchangeCode && result?.type === 'success') {\n      const exchangeRequest = new AccessTokenRequest({\n        clientId,\n        clientSecret: config.clientSecret,\n        redirectUri,\n        scopes: config.scopes,\n        code: result.params.code,\n        extraParams: {\n          code_verifier: request?.codeVerifier || '',\n        },\n      });\n      exchangeRequest.performAsync(discovery).then((authentication) => {\n        if (isMounted) {\n          setFullResult({\n            ...result,\n            params: {\n              id_token: authentication?.idToken || '',\n              access_token: authentication.accessToken,\n              ...result.params,\n            },\n            authentication,\n          });\n        }\n      });\n    } else {\n      setFullResult(result);\n    }\n    return () => {\n      isMounted = false;\n    };\n  }, [\n    clientId,\n    redirectUri,\n    shouldAutoExchangeCode,\n    config.clientSecret,\n    config.scopes?.join(','),\n    request?.codeVerifier,\n    result,\n  ]);\n\n  return [request, fullResult, promptAsync];\n}\n"]},"metadata":{},"sourceType":"module"}